{"version":3,"file":"background.js","mappingssources":["webpack://tracy/./src/background/background.ts"],"sourcesContent":["let existingTabId = null;\nchrome.action.onClicked.addListener(function (tab) {\n    if (existingTabId) {\n        // If the tab is already open, switch to it\n        chrome.tabs.update(existingTabId, { active: true });\n    }\n    else {\n        // If the tab is not open, create a new one\n        chrome.tabs.create({ url: \"popup.html\" }, function (newTab) {\n            existingTabId = newTab.id;\n        });\n    }\n});\nlet tabInfo = [];\nlet tabIdList = [];\nlet childTabIdList = [];\nlet updatedTabIdList = [];\nlet removedTabIdList = [];\nlet replacedTabIdList = [];\n// adding all the opened tabs for the first time\nchrome.tabs.query({}, function (tabs) {\n    tabs.forEach((tab) => {\n        tabIdList.push(tab.id);\n        tabInfo.push({\n            type: \"existing\",\n            id: tab.id,\n            url: tab.url,\n            title: tab.title,\n            childId: [],\n            changeLog: { url: [], title: [], id: [] },\n        });\n    });\n    console.log({ tabInfo });\n    // console.log({ tabIdList });\n    // console.log({ updatedTabIdList });\n    // console.log({ childTabIdList });\n    // console.log({ removedTabIdList });\n    // console.log({ replacedTabIdList });\n});\n// tracking when a new tab is created\nchrome.tabs.onCreated.addListener((newTab) => {\n    tabIdList.push(newTab.id);\n    tabInfo.push({\n        type: \"created\",\n        id: newTab.id,\n        childId: [],\n        changeLog: { url: [], title: [], id: [] },\n    });\n    if (newTab.openerTabId) {\n        childTabIdList.push(newTab.id);\n        const ind = tabInfo.findIndex((tab) => tab.id === newTab.openerTabId);\n        tabInfo[ind].childId.push(newTab.id);\n        tabInfo[ind].type = \"child added\";\n    }\n    console.log({ tabInfo });\n    // console.log({ tabIdList });\n    // console.log({ updatedTabIdList });\n    // console.log({ childTabIdList });\n    // console.log({ removedTabIdList });\n    // console.log({ replacedTabIdList });\n});\n//tracking when a tab is deleted\nchrome.tabs.onRemoved.addListener((tabId) => {\n    removedTabIdList.push(tabId);\n    const ind = tabInfo.findIndex((tab) => tab.id === tabId);\n    tabInfo[ind].type = \"removed\";\n    console.log({ tabInfo });\n    // console.log({ tabIdList });\n    // console.log({ updatedTabIdList });\n    // console.log({ childTabIdList });\n    // console.log({ removedTabIdList });\n    // console.log({ replacedTabIdList });\n});\nchrome.tabs.onUpdated.addListener(function (tabId, changeInfo, tab) {\n    // console.log({ changeInfo });\n    var _a, _b, _c;\n    const ind = tabInfo.findIndex((tab) => tab.id === tabId);\n    if (ind !== -1) {\n        if (tabInfo[ind].changeLog) {\n            tabInfo[ind].type = \"updated\";\n        }\n        (_a = tabInfo[ind].changeLog.id) === null || _a === void 0 ? void 0 : _a.push(tabId);\n        if (changeInfo.url) {\n            (_b = tabInfo[ind].changeLog.url) === null || _b === void 0 ? void 0 : _b.push(changeInfo.url);\n        }\n        if (changeInfo.title) {\n            (_c = tabInfo[ind].changeLog.title) === null || _c === void 0 ? void 0 : _c.push(changeInfo.title);\n        }\n    }\n    syncTabInfo(tabId);\n    console.log({ tabInfo });\n    // console.log({ tabIdList });\n    // console.log({ updatedTabIdList });\n    // console.log({ childTabIdList });\n    // console.log({ removedTabIdList });\n    // console.log({ replacedTabIdList });\n});\nconst syncTabInfo = (id) => {\n    const ind = tabInfo.findIndex((tab) => tab.id === id);\n    if (ind !== -1) {\n        if (tabInfo[ind].changeLog.url.length !== 0) {\n            tabInfo[ind].url = tabInfo[ind].changeLog.url.at(-1);\n        }\n        if (tabInfo[ind].changeLog.title.length !== 0) {\n            tabInfo[ind].title = tabInfo[ind].changeLog.title.at(-1);\n        }\n    }\n};\n"],"names":[],"sourceRoot":""}