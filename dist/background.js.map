{"version":3,"file":"background.js","mappings":";;AAAA;AACA;AACA;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://tracy/webpack/bootstrap","webpack://tracy/webpack/runtime/make namespace object","webpack://tracy/./src/background/background.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","let existingTabId = null;\nchrome.action.onClicked.addListener(function (tab) {\n    if (existingTabId) {\n        // If the tab is already open, switch to it\n        chrome.tabs.update(existingTabId, { active: true });\n    }\n    else {\n        // If the tab is not open, create a new one\n        chrome.tabs.create({ url: \"popup.html\" }, function (newTab) {\n            existingTabId = newTab.id;\n        });\n    }\n});\nlet tabHistory = [];\n// adding all the opened tabs for the first time\nchrome.tabs.query({}, function (tabs) {\n    tabs.forEach((tab) => {\n        tabHistory.push({\n            type: \"existing\",\n            id: tab.id,\n            index: tab.index,\n            url: tab.url,\n            title: tab.title,\n        });\n    });\n});\n// tracking when a new tab is created\nchrome.tabs.onCreated.addListener((tab) => {\n    let parentUrl = \"\";\n    let parentTitle = \"\";\n    let parentIndex = null;\n    if (tab.openerTabId) {\n        chrome.tabs.get(tab.openerTabId, function (oldTab) {\n            const ind = tabHistory.findIndex((tab) => tab.id === oldTab.id);\n            if (ind !== -1) {\n                parentIndex = ind;\n            }\n            parentUrl = oldTab.url;\n            parentTitle = oldTab.title;\n        });\n    }\n    tabHistory.push({\n        type: \"created\",\n        id: tab.id,\n        index: tab.index,\n        url: tab.url,\n        title: tab.title,\n        parentId: tab.openerTabId,\n        parent: {\n            url: parentUrl,\n            title: parentTitle,\n            index: parentIndex,\n        },\n    });\n    console.log(tabHistory);\n});\n//tracking when a tab is deleted\nchrome.tabs.onRemoved.addListener((tabId) => {\n    const removedIndex = tabHistory.findIndex((tab) => tab.id === tabId);\n    tabHistory[removedIndex].type = \"removed\";\n    console.log(tabHistory);\n});\n//tracking when a tab is replaced\nchrome.tabs.onReplaced.addListener((addedTabId, removedTabId) => {\n    let previousTabUrl = \"\";\n    let previousTabTitle = \"\";\n    let previousTabindex = null;\n    chrome.tabs.get(removedTabId, (oldTab) => {\n        previousTabTitle = oldTab.title;\n        previousTabUrl = oldTab.url;\n        const ind = tabHistory.findIndex((tab) => tab.id === oldTab.id);\n        if (ind !== -1) {\n            previousTabindex = ind;\n        }\n    });\n    let newTabUrl = \"\";\n    let newTabTitle = \"\";\n    let newTabindex = null;\n    chrome.tabs.get(addedTabId, (newTab) => {\n        newTabTitle = newTab.title;\n        newTabUrl = newTab.url;\n        const ind = tabHistory.findIndex((tab) => tab.id === newTab.id);\n        if (ind !== -1) {\n            newTabindex = ind;\n        }\n    });\n    tabHistory.push({\n        type: \"replaced\",\n        id: addedTabId,\n        index: newTabindex,\n        url: newTabUrl,\n        title: newTabTitle,\n        previousId: removedTabId,\n        previous: {\n            url: previousTabUrl,\n            title: previousTabTitle,\n            index: previousTabindex,\n        },\n    });\n    console.log(tabHistory);\n});\nexport {};\n"],"names":[],"sourceRoot":""}